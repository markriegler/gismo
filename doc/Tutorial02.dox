namespace gismo {
/**
\page Tutorial02 Tutorial 02: Geometry

In this tutorial you will get to know the main geometric objects and
operations available in the library.
Since all parametric curves, surfaces or volumes are geometric
objects, all these derive from gsGeometry, which in turn derives from
gsFunction.

\section bsp02 Univariate B-splines

- gsKnotVector
  The main ingredient for constructing a B-spline basis is a knot vector.
  See \ref knotVector_example.

- gsBSplineBasis

  This class derives from gsBasis, representing a set of B-spline basis
  functions. These are polynomial functions, i.e. there are no weights
  (the weights if we regard them as NURBS are all equal to 1,
  therefore not stored).   

  Here is an example of how to create a knot
  vector and a B-spline basis, followed by uniform refinement.

  \include bspline_basis.cpp
  Output: \verbinclude bspline_basis.out

  Here is an example of how to get basis functions active on one point,
  and their corresponding values.

  \include bspline_basiseval.cpp
  Output: \verbinclude bspline_basiseval.out

  And similarly here is an example of how to compute the Greville
  abscissae, determine the basis functions active on them, and compute their values.

  \include bspline_greville.cpp
  Output: \verbinclude bspline_greville.out
  

  Several basic operations are available: degree elevation, knot
  insertion, uniform refinement, interpolation, and so on, see 
  \ref bSplineBasis_example for a few of them.


Contrusction of a B-spline curve.
- gsBSpline 
  This class derives from gsCurve and consists of a gsBSplineBasis
  plus a matrix which represents the coefficients in the
  basis. Therefore, the matrix contains the control points of the
  B-spline curve.

  Here is an example of how to create a B-spline curve, by declaring its basis and coefficients.
  \snippet bSplineCurve_example.cpp make curve

These B-spline related classes are implemented in the \ref Nurbs.

\section bsp03 Multi-variate B-splines

The extantion to multi dimentional space is based on tensor-product constructions.

- gsTensorBSplineBasis\<d\>

  The tensor-product basis of dimension d where the coordinates are
  gsBSplineBasis. This class derives from gsBasis, representing a set of tensor-product B-spline basis
  functions.

  Here is an example how to construct a bivariate tensor product BSpline basis,
  compute the domain tesselations (meshes) and visualize these elements in paraview.
  \include bivariate_basis.cpp
  
  For additional properites and operations, e.g. basis size, basis support, evaluation, derivation, refinement, etc., see \ref basis_example.
  
- gsTensorBSpline\<d\>

  A function defined by a gsTensorBSplineBasis plus a coefficient
  vector.  As before, the number \a d stands for the dimension. For
  d=2 we have a gsSurface, for d=3 we have a gsVolume and for d=4 a
  gsBulk.

Similarly, gsNurbsBasis, gsNurbs, gsTensorNurbsBasis and gsTensorNurbs
refer to Non-uniform rational B-spline bases patches (functions) of
dimension one, or more, respectively.

\section bsp04 Hierarchical B-splines

gsHBSplineBasis and gsTHBSplineBasis defines the hierarchical B-spline and the truncated hierarchical B-spline basis, respectively.
Note that both are derived from gsHTensorBasis.

The corresponding geometric objects are gsHBSpline<d, T> and gsTHBSpline<d, T>, where \a d stands for the dimension and \a T templates the type.

\ref thbSplineBasis_example contains a brief introduction and overview to gsTHBSplineBasis.
Additional examples can be found in
\ref thbRefinement_example for standard refinement operations, as well as in
\ref gsHBox_example, and \ref gsAdaptiveMeshing for admissible refinement and coarsening operations.

\section geometry01 gsGeometry example
All parametric objects (curves, surfaces or volumes) derive from the class gsGeometry.
\ref geometry_example illustrates a more generic example to create an analysis any given geometric object.

\subsection crgeo02 Creating simple geometries

- The class gsNurbsCreator has several functions that allow us to create
(compute) the B-spline basis and the control points of some standard
geometries.



\subsection crgeo03 Re-constructing geometries
- The \ref fitting_example shows how we can fit data points with B-splines.

\section multipatch02 Multi-patch

A gsMultiPatch object consists of a collection of patches with
topological information. The topology is given by the boundaries and the
adjacency graph, defining the connections between patches along
boundaries.

Here is an XML file defining a simple 2-patch rectangle (two_patches.xml):

\include filedata/planar/two_squares.xml

The file contains the patches plus information on the boundaries and
interfaces between them. A boundary is a side that does not meet with
another side.  An interface consists of two sides that meet plus
orientation information. The following illustration describes the
data:

\image html mp.png "Illustration of file two_patches.xml"

See also gismo::boundary and gismo::boundaryInterface for more
information on the meaning of the multipatch data.

Analogously to multipatch objects, a gsMultiBasis object is a
collection of gsBasis classes together with topological information
such as boundaries and interfaces.

*/
}
